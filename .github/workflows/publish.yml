name: Publish

on:
  workflow_dispatch:

env:
  NuGetDirectory: ${{ github.workspace }}/Artifacts

defaults:
  run:
    shell: pwsh

jobs:
  create_package:
    name: Create Package
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.nbgv.outputs.SemVer2 }}
      prereleaseVersion: ${{ steps.nbgv.outputs.PrereleaseVersion }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Setup Version
      uses: dotnet/nbgv@v0.4
      id: nbgv
    - name: Build
      run: dotnet build -c Release --no-restore
    - name: Test
      run: dotnet test -c Release --no-build --verbosity normal
    - name: Pack
      run: dotnet pack -c Release --no-build --output ${{ env.NuGetDirectory }}
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: NuGet
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg
    - name: Create Git Tag
      uses: rickstaa/action-create-tag@v1
      id: tag_create
      with:
        tag: "release/${{ steps.nbgv.outputs.SemVer2 }}"
        tag_exists_error: true
        message: "Release ${{ steps.nbgv.outputs.SemVer2 }}"

  deploy:
    name: Deploy to NuGet
    runs-on: ubuntu-latest
    needs: create_package
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: NuGet
          path: ${{ env.NuGetDirectory }}
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x
      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }

  create_github_release:
    name: Create Release on GitHub
    runs-on: ubuntu-latest
    needs: create_package
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: NuGet
          path: ${{ env.NuGetDirectory }}
      - name: Check For Prerelease
        id: prerelease_check
        shell: bash
        run: |
          if [ "${{ needs.create_package.outputs.prereleaseVersion }}" != '' ]; then
            echo "isPrerelease=true" >> $GITHUB_OUTPUT;
          else
            echo "isPrerelease=false" >> $GITHUB_OUTPUT;
          fi
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Release ${{ needs.create_package.outputs.version }}"
          generate_release_notes: true
          prerelease: ${{ steps.prerelease_check.outputs.isPrerelease }}
          tag_name: release/${{ needs.create_package.outputs.version }}
          files: ${{ env.NuGetDirectory }}/*.nupkg
